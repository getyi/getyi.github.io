{"title":"js笔记-4（语法）","slug":"js笔记-4","date":"2022-07-16T03:18:12.000Z","updated":"2022-07-16T03:21:00.332Z","comments":true,"path":"api/articles/js笔记-4.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"js笔记-语法\"><a href=\"#js笔记-语法\" class=\"headerlink\" title=\"js笔记(语法)\"></a>js笔记(语法)</h1><hr>\n<h2 id=\"创建数组对象\"><a href=\"#创建数组对象\" class=\"headerlink\" title=\"创建数组对象\"></a>创建数组对象</h2><ol>\n<li><p>var arr &#x3D; new Array( );</p>\n</li>\n<li><p>var arr &#x3D; [ ];</p>\n</li>\n<li><p>四个方法</p>\n<ol>\n<li><p>push()  向数组末尾添加一个或多个元素，并且返回数组的新的长度</p>\n</li>\n<li><p>pop()  删除数组的最后一个元素，并将被删除的元素作为返回值返回</p>\n</li>\n<li><p>unshift()  向数组开头添加一个或多个元素，并且返回新的数组长度</p>\n</li>\n<li><p>shift()  删除数组的第一个元素，并将被删除的元素作为返回值返回</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h2><ol>\n<li><p>forEach()方法需要一个函数作为参数</p>\n</li>\n<li><p>像这种函数，由我们创建但不是由我们调用，我们称为回调函数</p>\n</li>\n<li><p>数组中有几个元素函数就会执行几次，每次执行时，浏览器都会将遍历到的元素以实参的形式传递进来，我们可以来定义实参，来读取这些内容</p>\n</li>\n<li><p>浏览器会在回调函数中传递三个参数</p>\n<ol>\n<li><p>第一个参数，就是当前正在遍历的元素</p>\n</li>\n<li><p>第二个参数，就是当前正在遍历的元素的索引</p>\n</li>\n<li><p>第三个参数，就是正在遍历的数组</p>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"slice-和splice\"><a href=\"#slice-和splice\" class=\"headerlink\" title=\"slice()和splice()\"></a>slice()和splice()</h2><ol>\n<li><p>slice()</p>\n<ol>\n<li><p>可以用来从数组提取指定元素</p>\n</li>\n<li><p>该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p>\n</li>\n<li><p>参数</p>\n<ol>\n<li><p>截取开始的位置的索引，包含开始索引</p>\n</li>\n<li><p>截取结束的位置的索引，不包含结束索引</p>\n</li>\n</ol>\n</li>\n<li><p>索引 可以传递一个负值，如果传递一个负值，则从后往前计算</p>\n</li>\n</ol>\n</li>\n<li><p>splice()</p>\n<ol>\n<li><p>可以用于删除数组中的制定元素</p>\n</li>\n<li><p>使用splice()会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回</p>\n</li>\n<li><p>参数</p>\n<ol>\n<li><p>第一个，表示开始位置的索引</p>\n</li>\n<li><p>第二个，表示删除的数量</p>\n</li>\n<li><p>第三个及以后，可以传递一些新的元素，这些元素会自动插入到开始位置索引前边</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"剩余语法\"><a href=\"#剩余语法\" class=\"headerlink\" title=\"剩余语法\"></a>剩余语法</h2><ol>\n<li><p>concat()</p>\n<ol>\n<li><p>concat()可以连接两个或多个数组，并将新的数组返回</p>\n</li>\n<li><p>该方法不会对原数组产生影响</p>\n</li>\n</ol>\n</li>\n<li><p>join()</p>\n<ol>\n<li><p>join()可以将数组转换成一个字符串</p>\n</li>\n<li><p>该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回</p>\n</li>\n<li><p>在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符。<em>如果不指定连接符，则默认使用‘，’作为连接符</em></p>\n</li>\n</ol>\n</li>\n<li><p>reverse()</p>\n<ol>\n<li><p>reverse()可以用来反转数组</p>\n</li>\n<li><p>该方法会直接修改原数组</p>\n</li>\n</ol>\n</li>\n<li><p>sort()</p>\n<ol>\n<li><p>sort()可以用来对数组中的元素进行排序</p>\n</li>\n<li><p>也会影响原数组，默认会按照Unicode编码进行排序（对于纯数字也如此）</p>\n</li>\n<li><p>我们可以自己来指定排序的规则</p>\n<ol>\n<li><p>我们可以在sort()添加一个回调函数，来指定排序规则</p>\n</li>\n<li><p>回调函数中需要定义两个形参，浏览器会分别使用数组中的元素作为实参去调用回调函数</p>\n</li>\n<li><p>浏览器会根据回调函数的返回值来决定元素的顺序</p>\n<ol>\n<li><p>如果返回一个大于0的值，则元素会交换位置</p>\n</li>\n<li><p>如果返回一个小于0的值，则不会交换位置</p>\n</li>\n<li><p>如果返回一个0，也不会交换位置</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"call-和apply\"><a href=\"#call-和apply\" class=\"headerlink\" title=\"call()和apply()\"></a>call()和apply()</h2><ol>\n<li><p>call()和apply()</p>\n<ol>\n<li><p>这两个方法都是函数对象的方法，需要通过函数对象来调用</p>\n</li>\n<li><p>当对函数调用call()和apply()都会调用函数执行</p>\n</li>\n<li><p>在调用call()和apply()可以将一个对象指定为第一个参数，此时这个对象将会成为函数执行的this</p>\n</li>\n</ol>\n</li>\n<li><p>call()和apply()的区别</p>\n<ol>\n<li><p>call()方法可以将实参在对象之后依次传递</p>\n</li>\n<li><p>apply()方法需要将实参封装到一个数组中统一传递</p>\n</li>\n</ol>\n</li>\n</ol>\n","categories":[{"name":"笔记","slug":"笔记","count":4,"path":"api/categories/笔记.json"},{"name":"js笔记","slug":"笔记/js笔记","count":4,"path":"api/categories/笔记/js笔记.json"}],"tags":[{"name":"笔记","slug":"笔记","count":4,"path":"api/tags/笔记.json"}]}